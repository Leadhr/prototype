{"ast":null,"code":"var _jsxFileName = \"/home/hunter/dev/leadhr/prototype/front-end/src/components/Survey/Survey.js\";\nimport React, { useState, useEffect } from \"react\";\nimport SurveyBox from \"../SurveyBox/SurveyBox\";\nimport Submitted from \"../Submitted/Submitted\";\nimport style from '../../assets/style';\n\nfunction Survey() {\n  //contains all survey information\n  //format: array with 56 elements\n  //example element\n  //   {\n  //     \"question-id\": 1,\n  //     \"number\": 2,\n  //     \"question\": \"Of these three options, which is most important to you?\",\n  //     \"answers\": [\n  //       {\n  //         \"answer-id\": 1,\n  //         \"text\": \"Choosing my own path\"\n  //       },\n  //       {\n  //         \"answer-id\": 2,\n  //         \"text\": \"Putting others at ease\"\n  //       },\n  //       {\n  //         \"answer-id\": 3,\n  //         \"text\": \"Committing to a solid plan\"\n  //       }\n  //     ]\n  //   }\n  const [questionBank, setQuestionBank] = useState([]); //responses are modeled with an array of 56 elements. these elements are arrays of 2 elements - initialized to null\n\n  const [responseBank, setResponseBank] = useState(new Array(56).fill([null, null])); //tracks the current question\n\n  const [currentQuestion, setCurrentQuestion] = useState(0); //questions have two stages - picking your first and second choice\n\n  const [currentStage, setCurrentStage] = useState(0);\n  const [complete, setComplete] = useState(false);\n  const [postId, setData] = useState(0); //fetch questions\n\n  useEffect(() => {\n    fetch(\"/api/questions\").then(res => res.json()).then(data => {\n      setQuestionBank(data);\n    }).catch(console.log);\n  }, []);\n\n  function handleSetResponseBank(response, index, stage) {\n    const newResponseBank = responseBank.slice();\n    const newResponseBankEntry = newResponseBank[index].slice();\n    newResponseBankEntry[stage] = response;\n    newResponseBank[index] = newResponseBankEntry;\n    setResponseBank(newResponseBank);\n  }\n\n  function handleSetCurrentQuestion(number) {\n    setCurrentQuestion(number);\n  }\n\n  function handleSetCurrentStage(number) {\n    setCurrentStage(number);\n  }\n\n  function handleSetComplete(bool) {\n    setComplete(bool);\n  }\n\n  function handleSubmit(responses) {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(responses)\n    };\n    fetch('/api/responses', requestOptions).then(response => response.json()).then(data => setData(data.id));\n  }\n\n  if (questionBank.length > 0) {\n    if (complete) {\n      handleSubmit(responseBank);\n      return /*#__PURE__*/React.createElement(Submitted, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 16\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(SurveyBox, {\n        questionBank: questionBank,\n        responseBank: responseBank,\n        setResponseBank: handleSetResponseBank,\n        currentQuestion: currentQuestion,\n        setCurrentQuestion: handleSetCurrentQuestion,\n        currentStage: currentStage,\n        setCurrentStage: handleSetCurrentStage,\n        complete: complete,\n        setComplete: handleSetComplete,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }\n      });\n    }\n  } else {\n    return null;\n  }\n}\n\nexport default Survey;","map":{"version":3,"sources":["/home/hunter/dev/leadhr/prototype/front-end/src/components/Survey/Survey.js"],"names":["React","useState","useEffect","SurveyBox","Submitted","style","Survey","questionBank","setQuestionBank","responseBank","setResponseBank","Array","fill","currentQuestion","setCurrentQuestion","currentStage","setCurrentStage","complete","setComplete","postId","setData","fetch","then","res","json","data","catch","console","log","handleSetResponseBank","response","index","stage","newResponseBank","slice","newResponseBankEntry","handleSetCurrentQuestion","number","handleSetCurrentStage","handleSetComplete","bool","handleSubmit","responses","requestOptions","method","headers","body","JSON","stringify","id","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport SurveyBox from \"../SurveyBox/SurveyBox\";\nimport Submitted from \"../Submitted/Submitted\"\nimport style from '../../assets/style'\n\nfunction Survey() {\n  //contains all survey information\n  //format: array with 56 elements\n  //example element\n  //   {\n  //     \"question-id\": 1,\n  //     \"number\": 2,\n  //     \"question\": \"Of these three options, which is most important to you?\",\n  //     \"answers\": [\n  //       {\n  //         \"answer-id\": 1,\n  //         \"text\": \"Choosing my own path\"\n  //       },\n  //       {\n  //         \"answer-id\": 2,\n  //         \"text\": \"Putting others at ease\"\n  //       },\n  //       {\n  //         \"answer-id\": 3,\n  //         \"text\": \"Committing to a solid plan\"\n  //       }\n  //     ]\n  //   }\n  const [questionBank, setQuestionBank] = useState([]);\n  //responses are modeled with an array of 56 elements. these elements are arrays of 2 elements - initialized to null\n  const [responseBank, setResponseBank] = useState(\n    new Array(56).fill([null, null])\n  );\n  //tracks the current question\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  //questions have two stages - picking your first and second choice\n  const [currentStage, setCurrentStage] = useState(0);\n  const [complete, setComplete] = useState(false)\n  const [postId, setData] = useState(0);\n\n  //fetch questions\n  useEffect(() => {\n    fetch(\"/api/questions\")\n      .then((res) => res.json())\n      .then((data) => {\n        setQuestionBank(data);\n      })\n      .catch(console.log);\n  }, []);\n\n  function handleSetResponseBank(response, index, stage) {\n    const newResponseBank = responseBank.slice();\n    const newResponseBankEntry = newResponseBank[index].slice()\n    newResponseBankEntry[stage] = response;\n    newResponseBank[index] = newResponseBankEntry;\n    setResponseBank(newResponseBank);\n  }\n\n  function handleSetCurrentQuestion(number) {\n    setCurrentQuestion(number);\n  }\n\n  function handleSetCurrentStage(number) {\n    setCurrentStage(number)\n  }\n\n  function handleSetComplete(bool) {\n      setComplete(bool)\n  }\n\n  function handleSubmit(responses) {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(responses)\n        };\n        fetch('/api/responses', requestOptions)\n            .then(response => response.json())\n            .then(data => setData(data.id));\n\n  }\n\n  if (questionBank.length > 0) {\n    \n    if (complete) {\n        handleSubmit(responseBank)\n        return <Submitted />\n    } else {\n        return (\n            <SurveyBox\n              questionBank={questionBank}\n              responseBank={responseBank}\n              setResponseBank={handleSetResponseBank}\n              currentQuestion={currentQuestion}\n              setCurrentQuestion={handleSetCurrentQuestion}\n              currentStage={currentStage}\n              setCurrentStage={handleSetCurrentStage}\n              complete={complete}\n              setComplete={handleSetComplete}\n            />\n          );\n    }\n\n  } else {\n    return null;\n  }\n}\n\nexport default Survey;\n"]},"metadata":{},"sourceType":"module"}