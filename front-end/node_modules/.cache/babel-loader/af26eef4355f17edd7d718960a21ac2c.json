{"ast":null,"code":"import React, { Component } from \"react\";\nimport \"../../assets/style.css\";\nimport QuestionBox from \"../QuestionBox/QuestionBox\";\nimport Result from \"../Result/Result\";\n\nclass QuizApp extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      questionBank: [],\n      score: 0,\n      responses: 0\n    };\n\n    this.getQuestions = () => {\n      // GET request using fetch inside useEffect React hook\n      fetch(\"/api/questions\").then(res => res.json()).then(data => {\n        this.setState({\n          questionBank: data\n        });\n      }).catch(console.log);\n    };\n  }\n\n  //needs to be changed to store answer instead of compute answer\n  //   computeAnswer = (answer, correctAnswer) => {\n  //     if (answer === correctAnswer) {\n  //       this.setState({\n  //         score: this.state.score + 1,\n  //       });\n  //     }\n  //     this.setState({\n  //       responses: this.state.responses < 5 ? this.state.responses + 1 : 5,\n  //     });\n  //   };\n  //remove play again\n  //   playAgain = () => {\n  //     this.getQuestions();\n  //     this.setState({\n  //       score: 0,\n  //       responses: 0,\n  //     });\n  //   };\n  //runs when component is rendered\n  componentDidMount() {\n    //initialize state with data\n    this.getQuestions();\n  }\n\n  render() {\n    return (//   <div className=\"container\">\n      //     <div className=\"title\">Quiz App</div>\n      //     {/* if this.state.questionBank is not empty */}\n      //     {this.state.questionBank.length > 0 &&\n      //       // map through the array of question data\n      //       this.state.questionBank.map(\n      //         // for each question, return an h4 element with \"question\" as the text\n      //         ({ question, answers, correct, questionId }) => (\n      //           <QuestionBox\n      //             question={question}\n      //             options={answers}\n      //             key={questionId}\n      //             selected={(answer) => this.computeAnswer(answer, correct)}\n      //           />\n      //         )\n      //       )}\n      //     {this.state.responses === 5 ? (\n      //       <Result score={this.state.score} playAgain={this.playAgain} />\n      //     ) : null}\n      //   </div>\n      null\n    );\n  }\n\n}\n\nexport default QuizApp;","map":{"version":3,"sources":["/home/hunter/dev/leadhr/prototype/front-end/src/components/QuizApp/QuizApp.js"],"names":["React","Component","QuestionBox","Result","QuizApp","state","questionBank","score","responses","getQuestions","fetch","then","res","json","data","setState","catch","console","log","componentDidMount","render"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,wBAAP;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;;AAEA,MAAMC,OAAN,SAAsBH,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAC9BI,KAD8B,GACtB;AACNC,MAAAA,YAAY,EAAE,EADR;AAENC,MAAAA,KAAK,EAAE,CAFD;AAGNC,MAAAA,SAAS,EAAE;AAHL,KADsB;;AAAA,SAO9BC,YAP8B,GAOf,MAAM;AACnB;AACAC,MAAAA,KAAK,CAAC,gBAAD,CAAL,CACCC,IADD,CACOC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADf,EAECF,IAFD,CAEOG,IAAD,IAAU;AACd,aAAKC,QAAL,CAAc;AAAET,UAAAA,YAAY,EAAEQ;AAAhB,SAAd;AACD,OAJD,EAKCE,KALD,CAKOC,OAAO,CAACC,GALf;AAMD,KAf6B;AAAA;;AAgB9B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AACAC,EAAAA,iBAAiB,GAAG;AAClB;AACA,SAAKV,YAAL;AACD;;AACDW,EAAAA,MAAM,GAAG;AACP,WACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AArBJ;AAuBD;;AAlE6B;;AAqEhC,eAAehB,OAAf","sourcesContent":["import React, { Component } from \"react\";\nimport \"../../assets/style.css\";\nimport QuestionBox from \"../QuestionBox/QuestionBox\";\nimport Result from \"../Result/Result\";\n\nclass QuizApp extends Component {\n  state = {\n    questionBank: [],\n    score: 0,\n    responses: 0,\n  };\n  //function to fetch data from mock api\n  getQuestions = () => {\n    // GET request using fetch inside useEffect React hook\n    fetch(\"/api/questions\")\n    .then((res) => res.json())\n    .then((data) => {\n      this.setState({ questionBank: data });\n    })\n    .catch(console.log);\n  };\n  //needs to be changed to store answer instead of compute answer\n//   computeAnswer = (answer, correctAnswer) => {\n//     if (answer === correctAnswer) {\n//       this.setState({\n//         score: this.state.score + 1,\n//       });\n//     }\n//     this.setState({\n//       responses: this.state.responses < 5 ? this.state.responses + 1 : 5,\n//     });\n//   };\n\n//remove play again\n\n//   playAgain = () => {\n//     this.getQuestions();\n//     this.setState({\n//       score: 0,\n//       responses: 0,\n//     });\n//   };\n  //runs when component is rendered\n  componentDidMount() {\n    //initialize state with data\n    this.getQuestions();\n  }\n  render() {\n    return (\n    //   <div className=\"container\">\n    //     <div className=\"title\">Quiz App</div>\n    //     {/* if this.state.questionBank is not empty */}\n    //     {this.state.questionBank.length > 0 &&\n    //       // map through the array of question data\n    //       this.state.questionBank.map(\n    //         // for each question, return an h4 element with \"question\" as the text\n    //         ({ question, answers, correct, questionId }) => (\n    //           <QuestionBox\n    //             question={question}\n    //             options={answers}\n    //             key={questionId}\n    //             selected={(answer) => this.computeAnswer(answer, correct)}\n    //           />\n    //         )\n    //       )}\n    //     {this.state.responses === 5 ? (\n    //       <Result score={this.state.score} playAgain={this.playAgain} />\n    //     ) : null}\n    //   </div>\n        null\n    );\n  }\n}\n\nexport default QuizApp;\n"]},"metadata":{},"sourceType":"module"}