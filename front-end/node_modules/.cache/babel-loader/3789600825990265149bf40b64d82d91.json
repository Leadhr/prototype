{"ast":null,"code":"var _jsxFileName = \"/home/hunter/dev/leadhr/prototype/front-end/src/components/Answer/Answer.js\";\nimport React from \"react\";\n\nfunction Answer(props) {\n  function handleClick(e) {\n    e.preventDefault(); //on click, check what stage\n\n    if (props.currentStage === 0) {\n      //for stage zero we will update the response and increment the stage\n      props.setResponseBank(props.answer[\"answer-id\"], props.currentStage);\n      props.setCurrentStage(1);\n    } else {\n      //for stage one we will update the response and increment the current \n      //question, then set the stage to 0\n      props.setResponseBank(props.answer[\"answer-id\"], props.currentQuestion, props.currentStage); //check if we are done with the survey\n\n      if (props.currentQuestion === 55) {\n        //if we are done, set complete to true\n        props.setComplete(true);\n      }\n\n      props.setCurrentQuestion(props.currentQuestion + 1);\n      props.setCurrentStage(0);\n    }\n\n    console.log(props.answer[\"answer-id\"]);\n  } //   decides if the answer should be hidden\n\n\n  function hidden() {\n    if (props.currentStage === 1 && props.responseBank[props.currentQuestion] === props.answer[\"answer-id\"]) {\n      return true;\n    }\n  }\n\n  if (hidden()) {\n    return null;\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }\n    }, props.answer.text), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }\n    }));\n  }\n}\n\nexport default Answer;","map":{"version":3,"sources":["/home/hunter/dev/leadhr/prototype/front-end/src/components/Answer/Answer.js"],"names":["React","Answer","props","handleClick","e","preventDefault","currentStage","setResponseBank","answer","setCurrentStage","currentQuestion","setComplete","setCurrentQuestion","console","log","hidden","responseBank","text"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACrB,WAASC,WAAT,CAAqBC,CAArB,EAAwB;AACtBA,IAAAA,CAAC,CAACC,cAAF,GADsB,CAEtB;;AACA,QAAIH,KAAK,CAACI,YAAN,KAAuB,CAA3B,EAA8B;AAC1B;AACAJ,MAAAA,KAAK,CAACK,eAAN,CAAsBL,KAAK,CAACM,MAAN,CAAa,WAAb,CAAtB,EAAiDN,KAAK,CAACI,YAAvD;AACAJ,MAAAA,KAAK,CAACO,eAAN,CAAsB,CAAtB;AACH,KAJD,MAIO;AACH;AACA;AACAP,MAAAA,KAAK,CAACK,eAAN,CAAsBL,KAAK,CAACM,MAAN,CAAa,WAAb,CAAtB,EAAiDN,KAAK,CAACQ,eAAvD,EAAwER,KAAK,CAACI,YAA9E,EAHG,CAIH;;AACA,UAAIJ,KAAK,CAACQ,eAAN,KAA0B,EAA9B,EAAkC;AAC9B;AACAR,QAAAA,KAAK,CAACS,WAAN,CAAkB,IAAlB;AACH;;AACDT,MAAAA,KAAK,CAACU,kBAAN,CAAyBV,KAAK,CAACQ,eAAN,GAAwB,CAAjD;AACAR,MAAAA,KAAK,CAACO,eAAN,CAAsB,CAAtB;AACH;;AACDI,IAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAK,CAACM,MAAN,CAAa,WAAb,CAAZ;AACD,GArBoB,CAuBvB;;;AACE,WAASO,MAAT,GAAkB;AACd,QAAIb,KAAK,CAACI,YAAN,KAAuB,CAAvB,IAA4BJ,KAAK,CAACc,YAAN,CAAmBd,KAAK,CAACQ,eAAzB,MAA8CR,KAAK,CAACM,MAAN,CAAa,WAAb,CAA9E,EAAyG;AACrG,aAAO,IAAP;AACH;AACJ;;AAED,MAAIO,MAAM,EAAV,EAAc;AACZ,WAAO,IAAP;AACD,GAFD,MAEO;AACL,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAQ,MAAA,OAAO,EAAEZ,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA+BD,KAAK,CAACM,MAAN,CAAaS,IAA5C,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADJ;AAMD;AAEF;;AAED,eAAehB,MAAf","sourcesContent":["import React from \"react\";\n\nfunction Answer(props) {\n  function handleClick(e) {\n    e.preventDefault();\n    //on click, check what stage\n    if (props.currentStage === 0) {\n        //for stage zero we will update the response and increment the stage\n        props.setResponseBank(props.answer[\"answer-id\"], props.currentStage)\n        props.setCurrentStage(1)\n    } else {\n        //for stage one we will update the response and increment the current \n        //question, then set the stage to 0\n        props.setResponseBank(props.answer[\"answer-id\"], props.currentQuestion, props.currentStage)\n        //check if we are done with the survey\n        if (props.currentQuestion === 55) {\n            //if we are done, set complete to true\n            props.setComplete(true)\n        }\n        props.setCurrentQuestion(props.currentQuestion + 1)\n        props.setCurrentStage(0)\n    } \n    console.log(props.answer[\"answer-id\"]);\n  }\n\n//   decides if the answer should be hidden\n  function hidden() {\n      if (props.currentStage === 1 && props.responseBank[props.currentQuestion] === props.answer[\"answer-id\"]) {\n          return true;\n      }\n  }\n\n  if (hidden()) {\n    return null;\n  } else {\n    return (\n        <div>\n          <button onClick={handleClick}>{props.answer.text}</button>\n          <br></br>\n        </div>\n      );\n  }\n\n}\n\nexport default Answer;\n"]},"metadata":{},"sourceType":"module"}