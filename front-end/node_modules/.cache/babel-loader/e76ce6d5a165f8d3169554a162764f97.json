{"ast":null,"code":"var _jsxFileName = \"/home/hunter/dev/leadhr/prototype/front-end/src/components/Answer/Answer.js\";\nimport React, { useState } from \"react\";\n\nfunction Answer(props) {\n  function submitResponse(response) {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(response)\n    };\n    fetch('https://jsonplaceholder.typicode.com/posts', requestOptions).then(response => response.json()).then(data => this.setState({\n      postId: data.id\n    }));\n  }\n\n  function handleClick(e) {\n    e.preventDefault(); //on click, check what stage\n\n    if (props.currentStage === 0) {\n      //for stage zero we will update the response and increment the stage\n      props.setResponseBank(props.answer[\"answer-id\"], props.currentQuestion, props.currentStage);\n      props.setCurrentStage(1); //then hide the element\n\n      props.setShow(false, props.answer[\"answer-id\"] - 1);\n    } else {\n      //for stage one we will update the response and increment the current\n      //question, then set the stage to 0\n      props.setResponseBank(props.answer[\"answer-id\"], props.currentQuestion, props.currentStage); //   props.setShow(true, 0)\n      //   props.setShow(true, 1)\n      //   props.setShow(true, 2)\n      //check if we are done with the survey\n\n      if (props.currentQuestion === 55) {\n        //if we are done, call submit function and set complete to true\n        props.setComplete(true);\n      }\n\n      props.setCurrentQuestion(props.currentQuestion + 1);\n      props.setCurrentStage(0);\n    }\n\n    console.log(props.answer[\"answer-id\"]);\n  }\n\n  if (props.show) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }\n    }, props.answer.text), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }\n    }));\n  } else {\n    return null;\n  }\n}\n\nexport default Answer;","map":{"version":3,"sources":["/home/hunter/dev/leadhr/prototype/front-end/src/components/Answer/Answer.js"],"names":["React","useState","Answer","props","submitResponse","response","requestOptions","method","headers","body","JSON","stringify","fetch","then","json","data","setState","postId","id","handleClick","e","preventDefault","currentStage","setResponseBank","answer","currentQuestion","setCurrentStage","setShow","setComplete","setCurrentQuestion","console","log","show","text"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACrB,WAASC,cAAT,CAAwBC,QAAxB,EAAkC;AAChC,UAAMC,cAAc,GAAG;AACnBC,MAAAA,MAAM,EAAE,MADW;AAEnBC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFU;AAGnBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,QAAf;AAHa,KAAvB;AAKAO,IAAAA,KAAK,CAAC,4CAAD,EAA+CN,cAA/C,CAAL,CACKO,IADL,CACUR,QAAQ,IAAIA,QAAQ,CAACS,IAAT,EADtB,EAEKD,IAFL,CAEUE,IAAI,IAAI,KAAKC,QAAL,CAAc;AAAEC,MAAAA,MAAM,EAAEF,IAAI,CAACG;AAAf,KAAd,CAFlB;AAGD;;AACD,WAASC,WAAT,CAAqBC,CAArB,EAAwB;AACtBA,IAAAA,CAAC,CAACC,cAAF,GADsB,CAEtB;;AACA,QAAIlB,KAAK,CAACmB,YAAN,KAAuB,CAA3B,EAA8B;AAC5B;AACAnB,MAAAA,KAAK,CAACoB,eAAN,CAAsBpB,KAAK,CAACqB,MAAN,CAAa,WAAb,CAAtB,EAAiDrB,KAAK,CAACsB,eAAvD,EAAwEtB,KAAK,CAACmB,YAA9E;AACAnB,MAAAA,KAAK,CAACuB,eAAN,CAAsB,CAAtB,EAH4B,CAI5B;;AACAvB,MAAAA,KAAK,CAACwB,OAAN,CAAc,KAAd,EAAqBxB,KAAK,CAACqB,MAAN,CAAa,WAAb,IAA4B,CAAjD;AACD,KAND,MAMO;AACL;AACA;AACArB,MAAAA,KAAK,CAACoB,eAAN,CACEpB,KAAK,CAACqB,MAAN,CAAa,WAAb,CADF,EAEErB,KAAK,CAACsB,eAFR,EAGEtB,KAAK,CAACmB,YAHR,EAHK,CAQP;AACA;AACA;AACE;;AACA,UAAInB,KAAK,CAACsB,eAAN,KAA0B,EAA9B,EAAkC;AAChC;AACAtB,QAAAA,KAAK,CAACyB,WAAN,CAAkB,IAAlB;AACD;;AACDzB,MAAAA,KAAK,CAAC0B,kBAAN,CAAyB1B,KAAK,CAACsB,eAAN,GAAwB,CAAjD;AACAtB,MAAAA,KAAK,CAACuB,eAAN,CAAsB,CAAtB;AACD;;AACDI,IAAAA,OAAO,CAACC,GAAR,CAAY5B,KAAK,CAACqB,MAAN,CAAa,WAAb,CAAZ;AACD;;AACD,MAAIrB,KAAK,CAAC6B,IAAV,EAAgB;AACd,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAQ,MAAA,OAAO,EAAEb,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA+BhB,KAAK,CAACqB,MAAN,CAAaS,IAA5C,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADJ;AAMD,GAPD,MAOO;AACH,WAAO,IAAP;AACH;AACF;;AAED,eAAe/B,MAAf","sourcesContent":["import React, { useState } from \"react\";\n\nfunction Answer(props) {\n  function submitResponse(response) {\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(response)\n    };\n    fetch('https://jsonplaceholder.typicode.com/posts', requestOptions)\n        .then(response => response.json())\n        .then(data => this.setState({ postId: data.id }));\n  }\n  function handleClick(e) {\n    e.preventDefault();\n    //on click, check what stage\n    if (props.currentStage === 0) {\n      //for stage zero we will update the response and increment the stage\n      props.setResponseBank(props.answer[\"answer-id\"], props.currentQuestion, props.currentStage);\n      props.setCurrentStage(1);\n      //then hide the element\n      props.setShow(false, props.answer[\"answer-id\"] - 1)\n    } else {\n      //for stage one we will update the response and increment the current\n      //question, then set the stage to 0\n      props.setResponseBank(\n        props.answer[\"answer-id\"],\n        props.currentQuestion,\n        props.currentStage\n      );\n    //   props.setShow(true, 0)\n    //   props.setShow(true, 1)\n    //   props.setShow(true, 2)\n      //check if we are done with the survey\n      if (props.currentQuestion === 55) {\n        //if we are done, call submit function and set complete to true\n        props.setComplete(true);\n      }\n      props.setCurrentQuestion(props.currentQuestion + 1);\n      props.setCurrentStage(0);\n    }\n    console.log(props.answer[\"answer-id\"]);\n  }\n  if (props.show) {\n    return (\n        <div>\n          <button onClick={handleClick}>{props.answer.text}</button>\n          <br></br>\n        </div>\n      );\n  } else {\n      return null;\n  }\n}\n\nexport default Answer;\n"]},"metadata":{},"sourceType":"module"}