{"ast":null,"code":"var _jsxFileName = \"/home/hunter/dev/leadhr/prototype/front-end/src/components/Survey/Survey.js\";\nimport React, { useState, useEffect } from \"react\";\nimport SurveyBox from \"../SurveyBox/SurveyBox\";\n\nfunction Survey() {\n  //contains all survey information\n  //format: array with 56 elements\n  //example element\n  //   {\n  //     \"question-id\": 1,\n  //     \"number\": 2,\n  //     \"question\": \"Of these three options, which is most important to you?\",\n  //     \"answers\": [\n  //       {\n  //         \"answer-id\": 1,\n  //         \"text\": \"Choosing my own path\"\n  //       },\n  //       {\n  //         \"answer-id\": 2,\n  //         \"text\": \"Putting others at ease\"\n  //       },\n  //       {\n  //         \"answer-id\": 3,\n  //         \"text\": \"Committing to a solid plan\"\n  //       }\n  //     ]\n  //   }\n  const [questionBank, setQuestionBank] = useState([]); //responses are modeled with an array of 56 elements. these elements are arrays of 2 elements - initialized to null\n\n  const [responseBank, setResponseBank] = useState(new Array(56).fill([null, null])); //tracks the current question\n\n  const [currentQuestion, setCurrentQuestion] = useState(0); //questions have two stages - picking your first and second choice\n\n  const [currentStage, setCurrentStage] = useState(0);\n  const [complete, setComplete] = useState(false); //fetch questions\n\n  useEffect(() => {\n    fetch(\"/api/questions\").then(res => res.json()).then(data => {\n      setQuestionBank(data);\n    }).catch(console.log);\n  }, []);\n\n  function handleSetResponseBank(response, index) {\n    const newResponseBank = responseBank.slice();\n    newResponseBank[index] = response;\n    setResponseBank(newResponseBank);\n  }\n\n  function handleSetCurrentQuestion(number) {\n    setCurrentQuestion(number);\n  }\n\n  function handleSetCurrentStage(number) {\n    setCurrentStage(number);\n  }\n\n  function handleSetComplete(bool) {\n    setComplete(bool);\n  }\n\n  if (questionBank.length > 0) {\n    return /*#__PURE__*/React.createElement(SurveyBox, {\n      questionBank: questionBank,\n      responseBank: responseBank,\n      setResponseBank: handleSetResponseBank,\n      currentQuestion: currentQuestion,\n      setCurrentQuestion: handleSetCurrentQuestion,\n      currentStage: currentStage,\n      setCurrentStage: handleSetCurrentStage,\n      complete: complete,\n      setComplete: handleSetComplete,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }\n    });\n  } else {\n    return null;\n  }\n}\n\nexport default Survey;","map":{"version":3,"sources":["/home/hunter/dev/leadhr/prototype/front-end/src/components/Survey/Survey.js"],"names":["React","useState","useEffect","SurveyBox","Survey","questionBank","setQuestionBank","responseBank","setResponseBank","Array","fill","currentQuestion","setCurrentQuestion","currentStage","setCurrentStage","complete","setComplete","fetch","then","res","json","data","catch","console","log","handleSetResponseBank","response","index","newResponseBank","slice","handleSetCurrentQuestion","number","handleSetCurrentStage","handleSetComplete","bool","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,wBAAtB;;AAEA,SAASC,MAAT,GAAkB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCL,QAAQ,CAAC,EAAD,CAAhD,CAvBgB,CAwBhB;;AACA,QAAM,CAACM,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAC9C,IAAIQ,KAAJ,CAAU,EAAV,EAAcC,IAAd,CAAmB,CAAC,IAAD,EAAO,IAAP,CAAnB,CAD8C,CAAhD,CAzBgB,CA4BhB;;AACA,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCX,QAAQ,CAAC,CAAD,CAAtD,CA7BgB,CA8BhB;;AACA,QAAM,CAACY,YAAD,EAAeC,eAAf,IAAkCb,QAAQ,CAAC,CAAD,CAAhD;AACA,QAAM,CAACc,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC,KAAD,CAAxC,CAhCgB,CAkChB;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,KAAK,CAAC,gBAAD,CAAL,CACGC,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESG,IAAD,IAAU;AACdf,MAAAA,eAAe,CAACe,IAAD,CAAf;AACD,KAJH,EAKGC,KALH,CAKSC,OAAO,CAACC,GALjB;AAMD,GAPQ,EAON,EAPM,CAAT;;AASA,WAASC,qBAAT,CAA+BC,QAA/B,EAAyCC,KAAzC,EAAgD;AAC9C,UAAMC,eAAe,GAAGrB,YAAY,CAACsB,KAAb,EAAxB;AACAD,IAAAA,eAAe,CAACD,KAAD,CAAf,GAAyBD,QAAzB;AACAlB,IAAAA,eAAe,CAACoB,eAAD,CAAf;AACD;;AAED,WAASE,wBAAT,CAAkCC,MAAlC,EAA0C;AACxCnB,IAAAA,kBAAkB,CAACmB,MAAD,CAAlB;AACD;;AAED,WAASC,qBAAT,CAA+BD,MAA/B,EAAuC;AACrCjB,IAAAA,eAAe,CAACiB,MAAD,CAAf;AACD;;AAED,WAASE,iBAAT,CAA2BC,IAA3B,EAAiC;AAC7BlB,IAAAA,WAAW,CAACkB,IAAD,CAAX;AACH;;AAED,MAAI7B,YAAY,CAAC8B,MAAb,GAAsB,CAA1B,EAA6B;AAE3B,wBACQ,oBAAC,SAAD;AACE,MAAA,YAAY,EAAE9B,YADhB;AAEE,MAAA,YAAY,EAAEE,YAFhB;AAGE,MAAA,eAAe,EAAEkB,qBAHnB;AAIE,MAAA,eAAe,EAAEd,eAJnB;AAKE,MAAA,kBAAkB,EAAEmB,wBALtB;AAME,MAAA,YAAY,EAAEjB,YANhB;AAOE,MAAA,eAAe,EAAEmB,qBAPnB;AAQE,MAAA,QAAQ,EAAEjB,QARZ;AASE,MAAA,WAAW,EAAEkB,iBATf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADR;AAcD,GAhBD,MAgBO;AACL,WAAO,IAAP;AACD;AACF;;AAED,eAAe7B,MAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport SurveyBox from \"../SurveyBox/SurveyBox\";\n\nfunction Survey() {\n  //contains all survey information\n  //format: array with 56 elements\n  //example element\n  //   {\n  //     \"question-id\": 1,\n  //     \"number\": 2,\n  //     \"question\": \"Of these three options, which is most important to you?\",\n  //     \"answers\": [\n  //       {\n  //         \"answer-id\": 1,\n  //         \"text\": \"Choosing my own path\"\n  //       },\n  //       {\n  //         \"answer-id\": 2,\n  //         \"text\": \"Putting others at ease\"\n  //       },\n  //       {\n  //         \"answer-id\": 3,\n  //         \"text\": \"Committing to a solid plan\"\n  //       }\n  //     ]\n  //   }\n  const [questionBank, setQuestionBank] = useState([]);\n  //responses are modeled with an array of 56 elements. these elements are arrays of 2 elements - initialized to null\n  const [responseBank, setResponseBank] = useState(\n    new Array(56).fill([null, null])\n  );\n  //tracks the current question\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  //questions have two stages - picking your first and second choice\n  const [currentStage, setCurrentStage] = useState(0);\n  const [complete, setComplete] = useState(false)\n\n  //fetch questions\n  useEffect(() => {\n    fetch(\"/api/questions\")\n      .then((res) => res.json())\n      .then((data) => {\n        setQuestionBank(data);\n      })\n      .catch(console.log);\n  }, []);\n\n  function handleSetResponseBank(response, index) {\n    const newResponseBank = responseBank.slice();\n    newResponseBank[index] = response;\n    setResponseBank(newResponseBank);\n  }\n\n  function handleSetCurrentQuestion(number) {\n    setCurrentQuestion(number);\n  }\n\n  function handleSetCurrentStage(number) {\n    setCurrentStage(number)\n  }\n\n  function handleSetComplete(bool) {\n      setComplete(bool)\n  }\n\n  if (questionBank.length > 0) {\n    \n    return (\n            <SurveyBox\n              questionBank={questionBank}\n              responseBank={responseBank}\n              setResponseBank={handleSetResponseBank}\n              currentQuestion={currentQuestion}\n              setCurrentQuestion={handleSetCurrentQuestion}\n              currentStage={currentStage}\n              setCurrentStage={handleSetCurrentStage}\n              complete={complete}\n              setComplete={handleSetComplete}\n            />\n          );\n\n  } else {\n    return null;\n  }\n}\n\nexport default Survey;\n"]},"metadata":{},"sourceType":"module"}